;; Auto-generated. Do not edit!


(when (boundp 'rob599_basic::FibonacciResult)
  (if (not (find-package "ROB599_BASIC"))
    (make-package "ROB599_BASIC"))
  (shadow 'FibonacciResult (find-package "ROB599_BASIC")))
(unless (find-package "ROB599_BASIC::FIBONACCIRESULT")
  (make-package "ROB599_BASIC::FIBONACCIRESULT"))

(in-package "ROS")
;;//! \htmlinclude FibonacciResult.msg.html


(defclass rob599_basic::FibonacciResult
  :super ros::object
  :slots (_sequence ))

(defmethod rob599_basic::FibonacciResult
  (:init
   (&key
    ((:sequence __sequence) (make-array 0 :initial-element 0 :element-type :integer))
    )
   (send-super :init)
   (setq _sequence __sequence)
   self)
  (:sequence
   (&optional __sequence)
   (if __sequence (setq _sequence __sequence)) _sequence)
  (:serialization-length
   ()
   (+
    ;; int64[] _sequence
    (* 8    (length _sequence)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64[] _sequence
     (write-long (length _sequence) s)
     (dotimes (i (length _sequence))
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke (elt _sequence i) (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class (elt _sequence i)) (= (length ((elt _sequence i) . bv)) 2)) ;; bignum
              (write-long (ash (elt ((elt _sequence i) . bv) 0) 0) s)
              (write-long (ash (elt ((elt _sequence i) . bv) 1) -1) s))
             ((and (class (elt _sequence i)) (= (length ((elt _sequence i) . bv)) 1)) ;; big1
              (write-long (elt ((elt _sequence i) . bv) 0) s)
              (write-long (if (>= (elt _sequence i) 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long (elt _sequence i) s)(write-long (if (>= (elt _sequence i) 0) 0 #xffffffff) s)))
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64[] _sequence
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _sequence (instantiate integer-vector n))
     (dotimes (i n)
#+(or :alpha :irix6 :x86_64)
      (setf (elt _sequence i) (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf (elt _sequence i) (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
     ))
   ;;
   self)
  )

(setf (get rob599_basic::FibonacciResult :md5sum-) "43834c71ae4b726371cabcee1e961700")
(setf (get rob599_basic::FibonacciResult :datatype-) "rob599_basic/FibonacciResult")
(setf (get rob599_basic::FibonacciResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
int64[] sequence

")



(provide :rob599_basic/FibonacciResult "43834c71ae4b726371cabcee1e961700")


