// Generated by gencpp from file rob599_hw1/approachGoal.msg
// DO NOT EDIT!


#ifndef ROB599_HW1_MESSAGE_APPROACHGOAL_H
#define ROB599_HW1_MESSAGE_APPROACHGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rob599_hw1
{
template <class ContainerAllocator>
struct approachGoal_
{
  typedef approachGoal_<ContainerAllocator> Type;

  approachGoal_()
    : stopping_distance(0.0)  {
    }
  approachGoal_(const ContainerAllocator& _alloc)
    : stopping_distance(0.0)  {
  (void)_alloc;
    }



   typedef float _stopping_distance_type;
  _stopping_distance_type stopping_distance;





  typedef boost::shared_ptr< ::rob599_hw1::approachGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rob599_hw1::approachGoal_<ContainerAllocator> const> ConstPtr;

}; // struct approachGoal_

typedef ::rob599_hw1::approachGoal_<std::allocator<void> > approachGoal;

typedef boost::shared_ptr< ::rob599_hw1::approachGoal > approachGoalPtr;
typedef boost::shared_ptr< ::rob599_hw1::approachGoal const> approachGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rob599_hw1::approachGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rob599_hw1::approachGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rob599_hw1::approachGoal_<ContainerAllocator1> & lhs, const ::rob599_hw1::approachGoal_<ContainerAllocator2> & rhs)
{
  return lhs.stopping_distance == rhs.stopping_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rob599_hw1::approachGoal_<ContainerAllocator1> & lhs, const ::rob599_hw1::approachGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rob599_hw1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rob599_hw1::approachGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rob599_hw1::approachGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_hw1::approachGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_hw1::approachGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_hw1::approachGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_hw1::approachGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rob599_hw1::approachGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91d6fae14032f66194a4a3424f9dee78";
  }

  static const char* value(const ::rob599_hw1::approachGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91d6fae14032f661ULL;
  static const uint64_t static_value2 = 0x94a4a3424f9dee78ULL;
};

template<class ContainerAllocator>
struct DataType< ::rob599_hw1::approachGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rob599_hw1/approachGoal";
  }

  static const char* value(const ::rob599_hw1::approachGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rob599_hw1::approachGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 stopping_distance\n"
;
  }

  static const char* value(const ::rob599_hw1::approachGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rob599_hw1::approachGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stopping_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct approachGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rob599_hw1::approachGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rob599_hw1::approachGoal_<ContainerAllocator>& v)
  {
    s << indent << "stopping_distance: ";
    Printer<float>::stream(s, indent + "  ", v.stopping_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROB599_HW1_MESSAGE_APPROACHGOAL_H
