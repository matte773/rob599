// Generated by gencpp from file rob599_hw1/stopping_distanceResponse.msg
// DO NOT EDIT!


#ifndef ROB599_HW1_MESSAGE_STOPPING_DISTANCERESPONSE_H
#define ROB599_HW1_MESSAGE_STOPPING_DISTANCERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rob599_hw1
{
template <class ContainerAllocator>
struct stopping_distanceResponse_
{
  typedef stopping_distanceResponse_<ContainerAllocator> Type;

  stopping_distanceResponse_()
    : output(false)  {
    }
  stopping_distanceResponse_(const ContainerAllocator& _alloc)
    : output(false)  {
  (void)_alloc;
    }



   typedef uint8_t _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct stopping_distanceResponse_

typedef ::rob599_hw1::stopping_distanceResponse_<std::allocator<void> > stopping_distanceResponse;

typedef boost::shared_ptr< ::rob599_hw1::stopping_distanceResponse > stopping_distanceResponsePtr;
typedef boost::shared_ptr< ::rob599_hw1::stopping_distanceResponse const> stopping_distanceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator1> & lhs, const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator1> & lhs, const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rob599_hw1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5fa62db5c86ed745052c3b25d12f430";
  }

  static const char* value(const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5fa62db5c86ed74ULL;
  static const uint64_t static_value2 = 0x5052c3b25d12f430ULL;
};

template<class ContainerAllocator>
struct DataType< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rob599_hw1/stopping_distanceResponse";
  }

  static const char* value(const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool output\n"
;
  }

  static const char* value(const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stopping_distanceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rob599_hw1::stopping_distanceResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROB599_HW1_MESSAGE_STOPPING_DISTANCERESPONSE_H
