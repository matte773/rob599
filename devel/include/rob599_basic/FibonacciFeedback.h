// Generated by gencpp from file rob599_basic/FibonacciFeedback.msg
// DO NOT EDIT!


#ifndef ROB599_BASIC_MESSAGE_FIBONACCIFEEDBACK_H
#define ROB599_BASIC_MESSAGE_FIBONACCIFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rob599_basic
{
template <class ContainerAllocator>
struct FibonacciFeedback_
{
  typedef FibonacciFeedback_<ContainerAllocator> Type;

  FibonacciFeedback_()
    : progress(0)  {
    }
  FibonacciFeedback_(const ContainerAllocator& _alloc)
    : progress(0)  {
  (void)_alloc;
    }



   typedef int64_t _progress_type;
  _progress_type progress;





  typedef boost::shared_ptr< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FibonacciFeedback_

typedef ::rob599_basic::FibonacciFeedback_<std::allocator<void> > FibonacciFeedback;

typedef boost::shared_ptr< ::rob599_basic::FibonacciFeedback > FibonacciFeedbackPtr;
typedef boost::shared_ptr< ::rob599_basic::FibonacciFeedback const> FibonacciFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rob599_basic::FibonacciFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rob599_basic::FibonacciFeedback_<ContainerAllocator1> & lhs, const ::rob599_basic::FibonacciFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rob599_basic::FibonacciFeedback_<ContainerAllocator1> & lhs, const ::rob599_basic::FibonacciFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rob599_basic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "880606345f35c22a654c3c928cd368c0";
  }

  static const char* value(const ::rob599_basic::FibonacciFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x880606345f35c22aULL;
  static const uint64_t static_value2 = 0x654c3c928cd368c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rob599_basic/FibonacciFeedback";
  }

  static const char* value(const ::rob599_basic::FibonacciFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# feedback\n"
"int64 progress\n"
"\n"
"\n"
;
  }

  static const char* value(const ::rob599_basic::FibonacciFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FibonacciFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rob599_basic::FibonacciFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rob599_basic::FibonacciFeedback_<ContainerAllocator>& v)
  {
    s << indent << "progress: ";
    Printer<int64_t>::stream(s, indent + "  ", v.progress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROB599_BASIC_MESSAGE_FIBONACCIFEEDBACK_H
